// Code generated by "enumer -type=errorClass"; DO NOT EDIT.

package driver

import (
	"fmt"
)

const _errorClassName = "errorClassUnknownerrorClassPermanenterrorClassTemporaryConnectivityRelated"

var _errorClassIndex = [...]uint8{0, 17, 36, 74}

func (i errorClass) String() string {
	if i < 0 || i >= errorClass(len(_errorClassIndex)-1) {
		return fmt.Sprintf("errorClass(%d)", i)
	}
	return _errorClassName[_errorClassIndex[i]:_errorClassIndex[i+1]]
}

var _errorClassValues = []errorClass{0, 1, 2}

var _errorClassNameToValueMap = map[string]errorClass{
	_errorClassName[0:17]:  0,
	_errorClassName[17:36]: 1,
	_errorClassName[36:74]: 2,
}

// errorClassString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func errorClassString(s string) (errorClass, error) {
	if val, ok := _errorClassNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to errorClass values", s)
}

// errorClassValues returns all values of the enum
func errorClassValues() []errorClass {
	return _errorClassValues
}

// IsAerrorClass returns "true" if the value is listed in the enum definition. "false" otherwise
func (i errorClass) IsAerrorClass() bool {
	for _, v := range _errorClassValues {
		if i == v {
			return true
		}
	}
	return false
}
